import {
  getMessages
} from "./chunk-JMLJIJD3.js";
import {
  require_react
} from "./chunk-YSDLPTTY.js";
import {
  __export,
  __toESM
} from "./chunk-ZS7NZCD4.js";

// node_modules/date-arithmetic/index.js
var date_arithmetic_exports = {};
__export(date_arithmetic_exports, {
  add: () => add,
  century: () => century,
  date: () => date,
  day: () => day,
  decade: () => decade,
  diff: () => diff,
  endOf: () => endOf,
  eq: () => eq,
  gt: () => gt,
  gte: () => gte,
  hours: () => hours,
  inRange: () => inRange,
  lt: () => lt,
  lte: () => lte,
  max: () => max,
  milliseconds: () => milliseconds,
  min: () => min,
  minutes: () => minutes,
  month: () => month,
  neq: () => neq,
  seconds: () => seconds,
  startOf: () => startOf,
  subtract: () => subtract,
  weekday: () => weekday,
  year: () => year
});
var MILI = "milliseconds";
var SECONDS = "seconds";
var MINUTES = "minutes";
var HOURS = "hours";
var DAY = "day";
var WEEK = "week";
var MONTH = "month";
var YEAR = "year";
var DECADE = "decade";
var CENTURY = "century";
var multiplierMilli = {
  "milliseconds": 1,
  "seconds": 1e3,
  "minutes": 60 * 1e3,
  "hours": 60 * 60 * 1e3,
  "day": 24 * 60 * 60 * 1e3,
  "week": 7 * 24 * 60 * 60 * 1e3
};
var multiplierMonth = {
  "month": 1,
  "year": 12,
  "decade": 10 * 12,
  "century": 100 * 12
};
function daysOf(year2) {
  return [31, daysInFeb(year2), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
}
function daysInFeb(year2) {
  return year2 % 4 === 0 && year2 % 100 !== 0 || year2 % 400 === 0 ? 29 : 28;
}
function add(d, num, unit) {
  d = new Date(d);
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      return addMillis(d, num * multiplierMilli[unit]);
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      return addMonths(d, num * multiplierMonth[unit]);
  }
  throw new TypeError('Invalid units: "' + unit + '"');
}
function addMillis(d, num) {
  var nextDate = new Date(+d + num);
  return solveDST(d, nextDate);
}
function addMonths(d, num) {
  var year2 = d.getFullYear(), month2 = d.getMonth(), day2 = d.getDate(), totalMonths = year2 * 12 + month2 + num, nextYear = Math.trunc(totalMonths / 12), nextMonth = totalMonths % 12, nextDay = Math.min(day2, daysOf(nextYear)[nextMonth]);
  var nextDate = new Date(d);
  nextDate.setFullYear(nextYear);
  nextDate.setDate(1);
  nextDate.setMonth(nextMonth);
  nextDate.setDate(nextDay);
  return nextDate;
}
function solveDST(currentDate, nextDate) {
  var currentOffset = currentDate.getTimezoneOffset(), nextOffset = nextDate.getTimezoneOffset();
  var diffMinutes = nextOffset - currentOffset;
  return new Date(+nextDate + diffMinutes * multiplierMilli["minutes"]);
}
function subtract(d, num, unit) {
  return add(d, -num, unit);
}
function startOf(d, unit, firstOfWeek) {
  d = new Date(d);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
      d = month(d, 0);
    case MONTH:
      d = date(d, 1);
    case WEEK:
    case DAY:
      d = hours(d, 0);
    case HOURS:
      d = minutes(d, 0);
    case MINUTES:
      d = seconds(d, 0);
    case SECONDS:
      d = milliseconds(d, 0);
  }
  if (unit === DECADE)
    d = subtract(d, year(d) % 10, "year");
  if (unit === CENTURY)
    d = subtract(d, year(d) % 100, "year");
  if (unit === WEEK)
    d = weekday(d, 0, firstOfWeek);
  return d;
}
function endOf(d, unit, firstOfWeek) {
  d = new Date(d);
  d = startOf(d, unit, firstOfWeek);
  switch (unit) {
    case CENTURY:
    case DECADE:
    case YEAR:
    case MONTH:
    case WEEK:
      d = add(d, 1, unit);
      d = subtract(d, 1, DAY);
      d.setHours(23, 59, 59, 999);
      break;
    case DAY:
      d.setHours(23, 59, 59, 999);
      break;
    case HOURS:
    case MINUTES:
    case SECONDS:
      d = add(d, 1, unit);
      d = subtract(d, 1, MILI);
  }
  return d;
}
var eq = createComparer(function(a, b) {
  return a === b;
});
var neq = createComparer(function(a, b) {
  return a !== b;
});
var gt = createComparer(function(a, b) {
  return a > b;
});
var gte = createComparer(function(a, b) {
  return a >= b;
});
var lt = createComparer(function(a, b) {
  return a < b;
});
var lte = createComparer(function(a, b) {
  return a <= b;
});
function min() {
  return new Date(Math.min.apply(Math, arguments));
}
function max() {
  return new Date(Math.max.apply(Math, arguments));
}
function inRange(day2, min2, max2, unit) {
  unit = unit || "day";
  return (!min2 || gte(day2, min2, unit)) && (!max2 || lte(day2, max2, unit));
}
var milliseconds = createAccessor("Milliseconds");
var seconds = createAccessor("Seconds");
var minutes = createAccessor("Minutes");
var hours = createAccessor("Hours");
var day = createAccessor("Day");
var date = createAccessor("Date");
var month = createAccessor("Month");
var year = createAccessor("FullYear");
function decade(d, val) {
  return val === void 0 ? year(startOf(d, DECADE)) : add(d, val + 10, YEAR);
}
function century(d, val) {
  return val === void 0 ? year(startOf(d, CENTURY)) : add(d, val + 100, YEAR);
}
function weekday(d, val, firstDay) {
  var w = (day(d) + 7 - (firstDay || 0)) % 7;
  return val === void 0 ? w : add(d, val - w, DAY);
}
function diff(date1, date2, unit, asFloat) {
  var dividend, divisor, result;
  switch (unit) {
    case MILI:
    case SECONDS:
    case MINUTES:
    case HOURS:
    case DAY:
    case WEEK:
      dividend = date2.getTime() - date1.getTime();
      break;
    case MONTH:
    case YEAR:
    case DECADE:
    case CENTURY:
      dividend = (year(date2) - year(date1)) * 12 + month(date2) - month(date1);
      break;
    default:
      throw new TypeError('Invalid units: "' + unit + '"');
  }
  switch (unit) {
    case MILI:
      divisor = 1;
      break;
    case SECONDS:
      divisor = 1e3;
      break;
    case MINUTES:
      divisor = 1e3 * 60;
      break;
    case HOURS:
      divisor = 1e3 * 60 * 60;
      break;
    case DAY:
      divisor = 1e3 * 60 * 60 * 24;
      break;
    case WEEK:
      divisor = 1e3 * 60 * 60 * 24 * 7;
      break;
    case MONTH:
      divisor = 1;
      break;
    case YEAR:
      divisor = 12;
      break;
    case DECADE:
      divisor = 120;
      break;
    case CENTURY:
      divisor = 1200;
      break;
    default:
      throw new TypeError('Invalid units: "' + unit + '"');
  }
  result = dividend / divisor;
  return asFloat ? result : Math.round(result);
}
function createAccessor(method) {
  var hourLength = function(method2) {
    switch (method2) {
      case "Milliseconds":
        return 36e5;
      case "Seconds":
        return 3600;
      case "Minutes":
        return 60;
      case "Hours":
        return 1;
      default:
        return null;
    }
  }(method);
  return function(d, val) {
    if (val === void 0)
      return d["get" + method]();
    var dateOut = new Date(d);
    dateOut["set" + method](val);
    if (hourLength && dateOut["get" + method]() != val && (method === "Hours" || val >= hourLength && dateOut.getHours() - d.getHours() < Math.floor(val / hourLength))) {
      dateOut["set" + method](val + hourLength);
    }
    return dateOut;
  };
}
function createComparer(operator) {
  return function(a, b, unit) {
    return operator(+startOf(a, unit), +startOf(b, unit));
  };
}

// node_modules/react-widgets/esm/dates.js
var isNullOrInvalid = (dte) => dte == null || isNaN(+dte);
var dates = Object.assign({}, date_arithmetic_exports, {
  merge(date2, time, defaultDate) {
    if (isNullOrInvalid(time) && isNullOrInvalid(date2) == null)
      return null;
    if (isNullOrInvalid(time))
      time = defaultDate || /* @__PURE__ */ new Date();
    if (isNullOrInvalid(date2))
      date2 = defaultDate || /* @__PURE__ */ new Date();
    date2 = dates.startOf(date2, "day");
    date2 = dates.hours(date2, dates.hours(time));
    date2 = dates.minutes(date2, dates.minutes(time));
    date2 = dates.seconds(date2, dates.seconds(time));
    return dates.milliseconds(date2, dates.milliseconds(time));
  }
});
var dates_default = dates;

// node_modules/react-widgets/esm/Localization.js
var import_react = __toESM(require_react());

// node_modules/react-widgets/esm/IntlLocalizer.js
var supportStyles = false;
new Intl.DateTimeFormat(void 0, {
  // @ts-ignore
  get dateStyle() {
    supportStyles = true;
  }
});
var dateShort = {
  day: "numeric",
  month: "numeric",
  year: "numeric"
};
var timeShort = {
  hour: "numeric",
  minute: "numeric"
};
var getFormatter = (culture, options) => Intl.DateTimeFormat(culture, options).format;
var IntlDateLocalizer = class {
  constructor({
    culture = void 0,
    firstOfWeek = 0
  } = {}) {
    this.culture = culture;
    this.firstOfWeek = () => firstOfWeek;
    function normalizeFormat(date2, format) {
      return typeof format === "function" ? format(date2, culture) : date2.toLocaleString(culture, format);
    }
    const formats = {
      date: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          dateStyle: "short"
        } : dateShort
      ),
      time: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          timeStyle: "short"
        } : timeShort
      ),
      datetime: getFormatter(
        culture,
        // @ts-ignore
        supportStyles ? {
          dateStyle: "short",
          timeStyle: "short"
        } : Object.assign({}, dateShort, timeShort)
      ),
      header: getFormatter(culture, {
        month: "short",
        year: "numeric"
      }),
      weekday: getFormatter(culture, {
        weekday: "narrow"
      }),
      dayOfMonth: getFormatter(culture, {
        day: "2-digit"
      }),
      month: getFormatter(culture, {
        month: "short"
      }),
      year: getFormatter(culture, {
        year: "numeric"
      }),
      decade: (date2) => `${this.year(date2)} - ${this.year(dates_default.endOf(date2, "decade"))}`,
      century: (date2) => `${this.year(date2)} - ${this.year(dates_default.endOf(date2, "century"))}`
    };
    Object.keys(formats).forEach((key) => {
      this[key] = (date2, format) => format ? normalizeFormat(date2, format) : formats[key](date2);
    });
  }
  toFormattedParts(date2, format = {
    dateStyle: "short",
    timeStyle: "short"
  }) {
    return Intl.DateTimeFormat(this.culture, format).formatToParts(date2).filter((p) => p.type !== "timeZoneName");
  }
  parse(value) {
    const date2 = new Date(value);
    return isNaN(+date2) ? null : date2;
  }
};
var IntlNumberLocalizer = class {
  constructor({
    culture = void 0
  } = {}) {
    var _$toLocaleString$m;
    this.culture = culture;
    const decimal = "formatToParts" in Intl.NumberFormat(culture) ? Intl.NumberFormat(culture).formatToParts(1.1)[1].value : ((_$toLocaleString$m = 1.1.toLocaleString(culture).match(/[^\d]/)) == null ? void 0 : _$toLocaleString$m[0]) || ".";
    const formatter = Intl.NumberFormat(culture).format;
    this.decimalCharacter = () => decimal;
    this.format = (num, format) => {
      if (format) {
        return typeof format === "function" ? format(num, culture) : num.toLocaleString(culture, format);
      }
      return formatter(num);
    };
  }
  parse(value) {
    return parseFloat(value.replace(this.decimalCharacter(), "."));
  }
};

// node_modules/react-widgets/esm/Localization.js
function mergeWithDefaults(date2, number, messages, formatOverrides = {}) {
  if (!date2 && !number)
    throw new Error("This component requires a Localizer but none was provided");
  return {
    formatOverrides,
    messages: getMessages(messages),
    formatDate(value, format, userFormat) {
      return date2[format](value, userFormat != null ? userFormat : this.formatOverrides[format]);
    },
    formatNumber(value, userFormat) {
      return number.format(value, userFormat != null ? userFormat : this.formatOverrides.number);
    },
    parseDate: date2.parse.bind(date2),
    parseNumber: number.parse.bind(number),
    decimalCharacter: number.decimalCharacter.bind(number),
    firstOfWeek: date2.firstOfWeek.bind(date2)
  };
}
var LocalizerContext = import_react.default.createContext(mergeWithDefaults(new IntlDateLocalizer(), new IntlNumberLocalizer()));
var Localization = ({
  date: _date = new IntlDateLocalizer(),
  number: _number = new IntlNumberLocalizer(),
  messages,
  children
}) => {
  const localizer = (0, import_react.useMemo)(() => mergeWithDefaults(_date, _number, messages), [
    _date,
    _number,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    JSON.stringify(messages)
  ]);
  return import_react.default.createElement(LocalizerContext.Provider, {
    value: localizer
  }, children);
};
var useLocalizer = (messages, formats) => {
  const localizer = (0, import_react.useContext)(LocalizerContext);
  return (0, import_react.useMemo)(() => {
    if (!messages && !formats)
      return localizer;
    return Object.assign({}, localizer, {
      messages: getMessages(Object.assign({}, localizer.messages, messages)),
      formatOverrides: Object.assign({}, localizer.formatOverrides, formats)
    });
  }, [messages, formats, localizer]);
};
Localization.useLocalizer = useLocalizer;

export {
  isNullOrInvalid,
  dates_default,
  useLocalizer
};
//# sourceMappingURL=chunk-C5XAPTI4.js.map
