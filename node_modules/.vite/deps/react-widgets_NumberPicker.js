import {
  Button_default,
  Input_default
} from "./chunk-FXI54CGI.js";
import {
  disabled
} from "./chunk-3T2BHOZF.js";
import {
  useLocalizer
} from "./chunk-C5XAPTI4.js";
import {
  WidgetPicker_default,
  Widget_default,
  canUseDOM_default,
  caretDown,
  caretUp,
  notify,
  ownerDocument,
  require_classnames,
  useEventCallback,
  useFocusManager,
  useUncontrolled
} from "./chunk-JMLJIJD3.js";
import {
  require_prop_types
} from "./chunk-4LVSZ64H.js";
import {
  require_react_dom
} from "./chunk-XBHG3ID7.js";
import {
  require_react
} from "./chunk-YSDLPTTY.js";
import {
  __toESM
} from "./chunk-ZS7NZCD4.js";

// node_modules/react-widgets/esm/NumberPicker.js
var import_classnames = __toESM(require_classnames());
var import_prop_types2 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());

// node_modules/dom-helpers/esm/activeElement.js
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument();
  }
  try {
    var active = doc.activeElement;
    if (!active || !active.nodeName)
      return null;
    return active;
  } catch (e) {
    return doc.body;
  }
}

// node_modules/react-widgets/esm/NumberInput.js
var import_prop_types = __toESM(require_prop_types());
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var _excluded = ["disabled", "readOnly", "placeholder", "innerRef", "min", "max", "localizer", "editing"];
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var isSign = (val) => (val || "").trim() === "-";
function isPaddedZeros(str, localizer) {
  let localeChar = localizer.decimalCharacter();
  let [_, decimals] = str.split(localeChar);
  return !!(decimals && decimals.match(/0+$/));
}
function isAtDelimiter(str, localizer) {
  let localeChar = localizer.decimalCharacter();
  let lastIndex = str.length - 1;
  if (str.length < 1)
    return false;
  let char = str[lastIndex];
  return !!(char === localeChar && str.indexOf(char) === lastIndex);
}
var NumberPickerInput = class extends import_react.default.Component {
  constructor(...args) {
    super(...args);
    this.state = {};
    this.handleBlur = (event) => {
      let str = this.state.stringValue;
      let number = this.parseNumber(str);
      if (this.isIntermediateValue(number, str)) {
        if (isNaN(number)) {
          number = null;
        }
        this.props.onChange(number, event);
      }
    };
    this.handleChange = (event) => {
      let {
        value,
        onChange
      } = this.props;
      let stringValue = event.target.value, numberValue = this.parseNumber(stringValue);
      let isIntermediate = this.isIntermediateValue(numberValue, stringValue);
      if (stringValue == null || stringValue.trim() === "") {
        this.setStringValue("");
        onChange(null, event);
        return;
      }
      if (isIntermediate) {
        this.setStringValue(stringValue);
      } else if (numberValue !== value) {
        onChange(numberValue, event);
      } else if (stringValue != this.state.stringValue) {
        this.setStringValue(stringValue);
      }
    };
  }
  getSnapshotBeforeUpdate({
    editing
  }) {
    return {
      reselectText: !editing && this.props.editing && this.isSelectingAllText()
    };
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    let {
      value,
      editing,
      localizer
    } = nextProps;
    let decimal = localizer.decimalCharacter();
    const stringValue = value == null || isNaN(value) ? "" : editing ? ("" + value).replace(".", decimal) : localizer.formatNumber(
      value
      /*, 'default'*/
    );
    if (prevState.lastValueFromProps !== stringValue)
      return {
        stringValue,
        lastValueFromProps: stringValue
      };
    return null;
  }
  componentDidUpdate(_, __, {
    reselectText
  }) {
    if (reselectText)
      (0, import_react_dom.findDOMNode)(this).select();
  }
  // this intermediate state is for when one runs into
  // the decimal or are typing the number
  setStringValue(stringValue) {
    this.setState({
      stringValue
    });
  }
  isIntermediateValue(num, str) {
    let {
      localizer,
      min
    } = this.props;
    return !!(num < min || isSign(str) || isAtDelimiter(str, localizer) || isPaddedZeros(str, localizer));
  }
  isSelectingAllText() {
    const node = canUseDOM_default && (0, import_react_dom.findDOMNode)(this);
    return canUseDOM_default && activeElement() === node && node.selectionStart === 0 && node.selectionEnd === node.value.length;
  }
  parseNumber(strVal) {
    let {
      localizer,
      parse: userParse
    } = this.props;
    if (userParse)
      return userParse(strVal, localizer);
    return localizer.parseNumber(strVal);
  }
  render() {
    let _this$props = this.props, {
      disabled: disabled2,
      readOnly,
      placeholder,
      // eslint-disable-next-line react/prop-types
      innerRef,
      min,
      max
    } = _this$props, props = _objectWithoutPropertiesLoose(_this$props, _excluded);
    let value = this.state.stringValue;
    return import_react.default.createElement(Input_default, _extends({}, props, {
      ref: innerRef,
      inputMode: "numeric",
      className: "rw-widget-input",
      onChange: this.handleChange,
      onBlur: this.handleBlur,
      "aria-valuenow": value,
      "aria-valuemin": isFinite(min) ? min : void 0,
      "aria-valuemax": isFinite(max) ? max : void 0,
      disabled: disabled2,
      readOnly,
      placeholder,
      value
    }));
  }
};
NumberPickerInput.defaultProps = {
  value: null,
  editing: false
};
NumberPickerInput.propTypes = {
  value: import_prop_types.default.number,
  editing: import_prop_types.default.bool,
  placeholder: import_prop_types.default.string,
  localizer: import_prop_types.default.object.isRequired,
  parse: import_prop_types.default.func,
  min: import_prop_types.default.number,
  max: import_prop_types.default.number,
  disabled,
  readOnly: disabled,
  onChange: import_prop_types.default.func.isRequired
};
var NumberInput_default = NumberPickerInput;

// node_modules/react-widgets/esm/NumberPicker.js
var _excluded2 = ["className", "containerClassName", "disabled", "readOnly", "value", "min", "max", "incrementIcon", "decrementIcon", "placeholder", "autoFocus", "tabIndex", "parse", "name", "onChange", "messages", "format", "onKeyDown", "onKeyPress", "onKeyUp", "inputProps", "precision", "step"];
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function createInterval(callback) {
  let fn;
  let id;
  const cancel = () => clearTimeout(id);
  id = window.setTimeout(fn = () => {
    id = window.setTimeout(fn, 35);
    callback();
  }, 500);
  return cancel;
}
function clamp(value, min, max) {
  max = max == null ? Infinity : max;
  min = min == null ? -Infinity : min;
  if (value == null || value === "")
    return null;
  return Math.max(Math.min(typeof value == "string" ? parseInt(value) : value, max), min);
}
var propTypes = {
  /**
   * @example ['valuePicker', [ [1, null] ]]
   */
  value: import_prop_types2.default.number,
  /**
   * @example ['onChangePicker', [ [1, null] ]]
   */
  onChange: import_prop_types2.default.func,
  /**
   * The minimum number that the NumberPicker value.
   * @example ['prop', ['min', 0]]
   */
  min: import_prop_types2.default.number,
  /**
   * The maximum number that the NumberPicker value.
   *
   * @example ['prop', ['max', 0]]
   */
  max: import_prop_types2.default.number,
  /**
   * Amount to increase or decrease value when using the spinner buttons.
   *
   * @example ['prop', ['step', 5]]
   */
  step: import_prop_types2.default.number,
  /**
   * Specify how precise the `value` should be when typing, incrementing, or decrementing the value.
   * When empty, precision is parsed from the current `format` and culture.
   */
  precision: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.oneOf(["auto"])]),
  /**
   * A format string used to display the number value. Localizer dependent, read about [localization](localization) for more info.
   *
   * @example ['prop', { max: 1, min: -1 , defaultValue: 0.2585, format: "{ style: 'percent' }" }]
   */
  format: import_prop_types2.default.any,
  parse: import_prop_types2.default.func,
  incrementIcon: import_prop_types2.default.node,
  decrementIcon: import_prop_types2.default.node,
  /** @ignore */
  tabIndex: import_prop_types2.default.any,
  name: import_prop_types2.default.string,
  placeholder: import_prop_types2.default.string,
  onKeyDown: import_prop_types2.default.func,
  onKeyPress: import_prop_types2.default.func,
  onKeyUp: import_prop_types2.default.func,
  autoFocus: import_prop_types2.default.bool,
  /**
   * @example ['disabled', ['1']]
   */
  disabled,
  /**
   * @example ['readOnly', ['1.5']]
   */
  readOnly: disabled,
  /** Adds a css class to the input container element. */
  containerClassName: import_prop_types2.default.string,
  inputProps: import_prop_types2.default.object,
  messages: import_prop_types2.default.shape({
    increment: import_prop_types2.default.string,
    decrement: import_prop_types2.default.string
  }),
  /** @ignore */
  localizer: import_prop_types2.default.object
};
var defaultProps = {
  incrementIcon: caretUp,
  decrementIcon: caretDown,
  min: -Infinity,
  max: Infinity,
  step: 1,
  precision: "auto"
};
function NumberPicker(uncontrolledProps) {
  const _useUncontrolled = useUncontrolled(uncontrolledProps, {
    value: "onChange"
  }), {
    className,
    containerClassName,
    disabled: disabled2,
    readOnly,
    value,
    min,
    max,
    incrementIcon,
    decrementIcon,
    placeholder,
    autoFocus,
    tabIndex,
    parse,
    name,
    onChange,
    messages,
    format,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    inputProps,
    precision,
    step: pStep
  } = _useUncontrolled, elementProps = _objectWithoutPropertiesLoose2(_useUncontrolled, _excluded2);
  const localizer = useLocalizer(messages, {
    number: format
  });
  const ref = (0, import_react2.useRef)(null);
  const inputRef = (0, import_react2.useRef)(null);
  const repeaterRef = (0, import_react2.useRef)(null);
  const [focusEvents, focused] = useFocusManager(ref, uncontrolledProps, {
    willHandle(focused2) {
      if (focused2)
        focus();
    }
  });
  const handleMouseDown = useEventCallback((direction, event) => {
    if (event)
      event.persist();
    let method = direction === "UP" ? increment : decrement;
    let value2 = method(event), atTop = direction === "UP" && value2 === max, atBottom = direction === "DOWN" && value2 === min;
    if (atTop || atBottom)
      handleMouseUp();
    else if (!repeaterRef.current) {
      repeaterRef.current = createInterval(() => {
        handleMouseDown(direction, event);
      });
    }
  });
  const handleMouseUp = useEventCallback(() => {
    if (!repeaterRef.current)
      return;
    repeaterRef.current();
    repeaterRef.current = null;
  });
  const handleKeyDown = useEventCallback((event) => {
    if (readOnly)
      return;
    let key = event.key;
    notify(onKeyDown, [event]);
    if (event.defaultPrevented)
      return;
    if (key === "End" && isFinite(max))
      handleChange(max, event);
    else if (key === "Home" && isFinite(min))
      handleChange(min, event);
    else if (key === "ArrowDown") {
      event.preventDefault();
      decrement(event);
    } else if (key === "ArrowUp") {
      event.preventDefault();
      increment(event);
    }
  });
  const handleChange = (rawValue, originalEvent = null) => {
    let nextValue = clamp(rawValue, min, max);
    if (value !== nextValue)
      notify(onChange, [nextValue, {
        rawValue,
        originalEvent,
        lastValue: value
      }]);
  };
  function focus() {
    var _inputRef$current;
    (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();
  }
  function increment(event) {
    return step(pStep, event);
  }
  function decrement(event) {
    return step(-pStep, event);
  }
  function step(amount, event) {
    const nextValue = (value || 0) + amount;
    let p = precision === "auto" ? Math.max(getPrecision(value || 0), getPrecision(amount)) : precision;
    handleChange(p != null ? parseFloat(nextValue.toFixed(p)) : nextValue, event);
    return nextValue;
  }
  const clampedValue = clamp(value, min, max);
  return import_react2.default.createElement(Widget_default, _extends2({}, elementProps, {
    focused,
    disabled: disabled2,
    readOnly,
    onKeyDown: handleKeyDown
  }, focusEvents, {
    ref,
    className: (0, import_classnames.default)(className, "rw-number-picker")
  }), import_react2.default.createElement(WidgetPicker_default, {
    className: containerClassName
  }, import_react2.default.createElement(NumberInput_default, _extends2({}, inputProps, {
    role: "spinbutton",
    tabIndex,
    value: clampedValue,
    placeholder,
    autoFocus,
    editing: focused,
    localizer,
    parse,
    name,
    min,
    max,
    disabled: disabled2,
    readOnly,
    onChange: handleChange,
    onKeyPress,
    onKeyUp,
    innerRef: inputRef
  })), import_react2.default.createElement("span", {
    className: "rw-input-addon rw-number-picker-spinners"
  }, import_react2.default.createElement(Button_default, {
    icon: incrementIcon,
    className: "rw-picker-btn",
    disabled: clampedValue === max || disabled2 || readOnly,
    label: localizer.messages.increment({
      value: clampedValue,
      min,
      max
    }),
    onMouseUp: () => handleMouseUp(),
    onMouseDown: (e) => handleMouseDown("UP", e),
    onMouseLeave: () => handleMouseUp()
  }), import_react2.default.createElement(Button_default, {
    icon: decrementIcon,
    className: "rw-picker-btn",
    disabled: clampedValue === min || disabled2 || readOnly,
    label: localizer.messages.decrement({
      value: clampedValue,
      min,
      max
    }),
    onMouseUp: () => handleMouseUp(),
    onMouseDown: (e) => handleMouseDown("DOWN", e),
    onMouseLeave: () => handleMouseUp()
  }))));
}
NumberPicker.propTypes = propTypes;
NumberPicker.defaultProps = defaultProps;
var NumberPicker_default = NumberPicker;
function getPrecision(a) {
  if (!isFinite(a))
    return 0;
  let e = 1;
  let p = 0;
  while (Math.round(a * e) / e !== a) {
    e *= 10;
    p++;
  }
  return p;
}
export {
  NumberPicker_default as default
};
//# sourceMappingURL=react-widgets_NumberPicker.js.map
